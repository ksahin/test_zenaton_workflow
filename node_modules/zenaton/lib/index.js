"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const path = require("path");

const {
  readdirSync,
  statSync
} = require("fs");

const {
  version
} = require("./infos");

const Errors = require("./Errors");

const LAST_CODE_PATH = "yield";

const getDirectories = source => readdirSync(source); // store path to this file for use by Zenaton worker


process.env.ZENATON_LIBRARY_PATH = path.resolve(__dirname, __filename); // Helping the Agent to check if is able to manage this version

process.env.ZENATON_LAST_CODE_PATH = `${LAST_CODE_PATH}`; // eslint-disable-next-line import/no-dynamic-require

const pathLast = require(`./Code/${LAST_CODE_PATH}`); // Define main version


const index = _objectSpread({
  Errors,
  infos: {
    appVersion: version,
    codePath: LAST_CODE_PATH
  }
}, pathLast); // add all code path


getDirectories(path.join(__dirname, "Code")).forEach(dir => {
  if (statSync(path.join(__dirname, "Code", dir)).isDirectory()) {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    index[dir] = require(`./Code/${dir}`);
  }
});
module.exports = index;